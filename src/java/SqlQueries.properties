# To change this template, choose Tools | Templates
# and open the template in the editor.

test=test
DASHBOARD_LINKS = SELECT readonly,editable FROM rolesgroupspermission WHERE roleid = ? AND groupid = ?
GET_CLASS_COMBO = SELECT s.batch_id AS id,c.name AS value FROM sessions s,class c WHERE s.class_id=c.classid  AND s.session_id='00a24b9a-5bb2-4466-b629-f9d91de9e551'

INSERT_TEMPLATE = INSERT INTO templates (id,NAME,COMMENT,createdby,modifiedby,createdon) VALUES(?,?,?,?,?,CURRENT_DATE)
UPDATE_TEMPLATE = UPDATE templates SET NAME = ?, COMMENT=? , modifiedby=? WHERE id = ?
UPDATE_CLASSES_TPL = UPDATE sessions SET template_id =? WHERE batch_id = ? 
UPDATE_FEE_STRUC = UPDATE feestructure SET header=?,fee_type=?,fee_amount=?,fee_frequency=?,COMMENT=? WHERE fee_structure_id=?

ADD_CALENDAR = INSERT INTO calendar(title,description,color,hidden) VALUES(?,?,?,?)
NEW_CALENDAR = SELECT MAX(calendar_id) AS id  FROM calendar
UPDATE_CALENDAR = UPDATE calendar SET title=?,description=?,color=? WHERE calendar_id = ? 
DEL_CALENDAR = DELETE FROM calendar WHERE calendar_id = ?
ADD_EVENT = INSERT INTO EVENTS(calendar_id,title,start_date,end_date,location,notes,url,reminder,isAllDay,isNew) VALUES(?,?,?,?,?,?,?,?,?,?)
NEW_EVENT = SELECT MAX(event_id) AS id FROM events
GET_CALENDARS = SELECT * FROM calendar
GET_EVENTS = SELECT * FROM events where start_date>?  and end_date < ?
DEL_EVENT= DELETE FROM EVENTS WHERE event_id = ?
UPDATE_EVENT = UPDATE EVENTS SET calendar_id=?,title=?,start_date=?,end_date=?,location=?,notes=?,url=?,reminder=?,isAllDay=?,isNew=? WHERE event_id = ?
ADD_SHEET =INSERT INTO attendance_sheet(month,batch_id) VALUES(?,?)
DEL_SHEET = DELETE FROM attendance_sheet WHERE sheet_id =?
GET_SHEET = SELECT attendance_sheet.sheet_id id ,attendance_sheet.batch_id batchId,month,classteacher classTeaher,name class FROM attendance_sheet  INNER JOIN sessions ON attendance_sheet.batch_id= sessions.batch_id INNER JOIN class cl ON sessions.class_id = cl.classid  WHERE sessions.batch_id = ? ORDER BY id desc
NEW_SHEET = SELECT MAX(sheet_id) AS sheetId FROM attendance_sheet
ADD_ATTENDANCE = INSERT INTO monthly_attendance(sheet_id,student_id) values(?,?)
GET_ATTENDACE_MON_STUDENT =SELECT ma.* FROM monthly_attendance ma  JOIN attendance_sheet AS ash ON ash.sheet_id=ma.sheet_id AND ash.MONTH=? AND ash.batch_id=?  WHERE  ma.student_id=?

GET_STUDENT_LIST=SELECT scm.roll_no AS rollno,studentid,CONCAT(CONCAT(CONCAT(CONCAT(fname,' '),CASE WHEN mname IS NULL THEN '' ELSE mname END),' '),lname) AS name,fname,lname,mname,FROM_UNIXTIME(dob/1000,'%d-%m-%Y') AS dob,address,fathername,mothername, caretakername,parentemailid,parentmobile,alternateemailid, alternatemobile,classid,schoolid,createdby,FROM_UNIXTIME(admissiondate/1000,'%d-%m-%Y') AS admissiondate,modifiedby/*,createdon,modifiedon*/, religion,cityid,stateid,countryid,userid , addmission_no AS admissionno,gender,blood_group,nationality,mother_tounge,image_path,passportno AS passport_no,  visadetails,ssn,uid,adharno AS aadhar_id,admissiontype FROM student_class_map scm JOIN student s ON scm.student_id=s.studentid WHERE batch_id= :batchid
ADD_SCHEDULE_ONLINE_EXAM_FOR_STUD=INSERT INTO studentonlineexam (id,schonlineexamid,studentid,tempuserid,temppassword,createdby, createdon,modifiedby)VALUES	(:id,:schonlineexamid,:studentid,:tempuserid,:temppassword,:createdby,CURRENT_DATE,:modifiedby)
ADD_SCHEDULE_ONLINE_EXAM=INSERT INTO onlineexamschedule (pid,batchid,examid,examdate,comment,createdby,modifiedby, createdon) VALUES (:pid,:batchid,:examid,:examdate,:comment,:createdby,:modifiedby,CURRENT_DATE)
RE_SCHEDULE_ONLINE_EXAM=UPDATE onlineexamschedule SET	examdate = :examdate , 	comment = :comment , modifiedby = :modifiedby WHERE pid = :pid 
DEL_SCHEDULE_ONLINE_EXAM=DELETE FROM onlineexamschedule WHERE pid=:pid


GET_ONLINE_SCH_EXAM=SELECT oles.pid , oled.examname AS examname , c.name AS class, m.value AS subject , oles.examdate AS scheduleddate  ,FROM_UNIXTIME(oles.examdate/1000,'%d-%m-%Y') AS  scheduleddatetxt , oles.comment FROM onlineexamschedule oles JOIN onlineexamdetail oled ON oled.id=oles.examid   JOIN master m ON m.id=oled.subjectid AND m.propertyid=2 JOIN sessions s ON s.batch_id=oles.batchid   JOIN class c ON c.classid=s.class_id  WHERE oles.batchid= ?  AND oles.createdby=?
GET_ONLINE_SCH_EXAM_COUNT=SELECT count(1) as count   FROM onlineexamschedule oles JOIN onlineexamdetail oled ON oled.id=oles.examid   JOIN master m ON m.id=oled.subjectid AND m.propertyid=2 JOIN sessions s ON s.batch_id=oles.batchid   JOIN class c ON c.classid=s.class_id  WHERE oles.batchid= ?  AND oles.createdby=?

GET_EXAM_USER_PASS=SELECT  CONCAT(CONCAT(CONCAT(CONCAT(s.fname,' '),CASE WHEN s.mname IS NULL THEN '' ELSE s.mname END),' '),s.lname) AS student, s.addmission_no as admissionno, sole.tempuserid as userid, sole.temppassword as pass ,  state, totalscore,examstatus, apearedondate, tot_time   FROM studentonlineexam sole JOIN student s ON s.studentid=sole.studentid WHERE schonlineexamid=?
GET_EXAM_USER_PASS_COUNT=SELECT  count(1) as count FROM studentonlineexam sole JOIN student s ON s.studentid=sole.studentid WHERE schonlineexamid=?

CHECK_BOOK_BOOKING=SELECT COUNT(1) as count FROM booktransaction WHERE bookid=?
DELETE_BOOK=UPDATE bookdetail SET deleted=1 ,modifiedby=:modifiedby WHERE id=:id

ADD_BOOK_REQUEST_DEMAND=INSERT INTO bookrequestordemand (requestid, bookid, requestedby, requesterid, batchid, enddate, description, createdby, createdon, modifiedby) VALUES	(:requestid, :bookid, :requestedby, :requesterid, :batchid, :enddate, :description, :createdby,CURRENT_DATE, :modifiedby)
CHECK_BOOK_REQUEST     =SELECT COUNT(1) AS count FROM bookrequestordemand WHERE bookid=? AND (FROM_UNIXTIME(enddate/1000) > CURRENT_DATE)
GET_BOOK_REQUESTER_LIST=SELECT req.description ,req.requestid , req.requestedby , CASE req.requestedby WHEN 1 THEN 'Teacher' WHEN 2 THEN 'Student' END AS requestedbytxt , req.requesterid ,CASE req.requestedby WHEN 1 THEN u.name WHEN 2 THEN CONCAT(CONCAT(CONCAT(CONCAT(s.fname,' '),CASE WHEN s.mname IS NULL THEN '' ELSE s.mname END),' '),s.lname) END AS requestername , req.createdon AS requestedon   FROM bookrequestordemand  req LEFT JOIN student s ON s.studentid=req.requesterid LEFT JOIN users   u ON u.userid   =req.requesterid WHERE bookid=? AND (FROM_UNIXTIME(enddate/1000) > CURRENT_DATE) ORDER BY req.createdon desc  LIMIT ? OFFSET ?
GET_BOOK_REQUESTER_LIST_COUNT=SELECT COUNT(1) AS count FROM bookrequestordemand WHERE bookid=? AND (FROM_UNIXTIME(enddate/1000) > CURRENT_DATE)

GET_BOOKED_HISTORY=SELECT * FROM (SELECT 'N/A' AS class,'Teacher' AS requestedbytxt,u.name AS requestername,FROM_UNIXTIME(fromdate/1000,'%d-%m-%Y')  fromdate ,FROM_UNIXTIME(todate/1000,'%d-%m-%Y')  todate ,CASE returnedflag WHEN 1 THEN 'Returned' WHEN 0 THEN 'Pending' END AS returnedflag,  FROM_UNIXTIME( returneddate/1000,'%d-%m-%Y') returneddate , bt.returncomment AS description FROM booktransaction  bt   JOIN users u  ON bt.teacherid=u.userid AND bt.issueto=1  WHERE bookid=? UNION SELECT c.name  AS class,'Student' AS requestedbytxt,CONCAT(CONCAT(CONCAT(CONCAT(s.fname,' '),CASE WHEN s.mname IS NULL THEN '' ELSE s.mname END),' '),s.lname) AS requestername, FROM_UNIXTIME(bt.fromdate/1000,'%d-%m-%Y')  fromdate ,FROM_UNIXTIME(bt.todate/1000,'%d-%m-%Y')  todate,CASE bt.returnedflag WHEN 1 THEN 'Returned' WHEN 0 THEN 'Pending' END AS returnedflag, FROM_UNIXTIME(bt.returneddate/1000,'%d-%m-%Y') returneddate   , bt.returncomment AS description FROM booktransaction  bt  JOIN student   s ON bt.studentid=s.studentid AND bt.issueto=2 JOIN sessions ss ON ss.batch_id=bt.batchid   JOIN class     c ON c.classid=ss.class_id  WHERE bookid=?) dat LIMIT ? OFFSET ?
GET_BOOKED_HISTORY_COUNT=SELECT count(1) as count FROM (SELECT 'N/A' AS class,'Teacher' AS requestedbytxt,u.name AS requestername,FROM_UNIXTIME(fromdate/1000,'%d-%m-%Y')  fromdate ,FROM_UNIXTIME(todate/1000,'%d-%m-%Y')  todate ,CASE returnedflag WHEN 1 THEN 'Returned' WHEN 0 THEN 'Pending' END AS returnedflag,  FROM_UNIXTIME( returneddate/1000,'%d-%m-%Y') returneddate , bt.returncomment AS description FROM booktransaction  bt   JOIN users u  ON bt.teacherid=u.userid AND bt.issueto=1  WHERE bookid=? UNION SELECT c.name  AS class,'Student' AS requestedbytxt,CONCAT(CONCAT(CONCAT(CONCAT(s.fname,' '),CASE WHEN s.mname IS NULL THEN '' ELSE s.mname END),' '),s.lname) AS requestername, FROM_UNIXTIME(bt.fromdate/1000,'%d-%m-%Y')  fromdate ,FROM_UNIXTIME(bt.todate/1000,'%d-%m-%Y')  todate,CASE bt.returnedflag WHEN 1 THEN 'Returned' WHEN 0 THEN 'Pending' END AS returnedflag, FROM_UNIXTIME(bt.returneddate/1000,'%d-%m-%Y') returneddate   , bt.returncomment AS description FROM booktransaction  bt  JOIN student   s ON bt.studentid=s.studentid AND bt.issueto=2 JOIN sessions ss ON ss.batch_id=bt.batchid   JOIN class     c ON c.classid=ss.class_id  WHERE bookid=?) dat


ELEARNING_STUDENT_VERIFICATION=SELECT * FROM studentonlineexam WHERE tempuserid=? AND temppassword=?

GET_ADMISSION_FEE_FOR_TEMPLATE=SELECT fs.fee_structure_id,fs.fee_name , fs.fee_type , fs.fee_amount FROM template_structure_mapping tsm  JOIN templates t ON t.id=tsm.template_id AND t.id=? JOIN feestructure fs ON fs.fee_structure_id=tsm.fee_structure_id
GET_COUNT_ADMISSION_FEE_FOR_TEMPLATE=SELECT count(1) as count FROM template_structure_mapping tsm  JOIN templates t ON t.id=tsm.template_id AND t.id=? JOIN feestructure fs ON fs.fee_structure_id=tsm.fee_structure_id

ADD_ADMISSION_FEE=INSERT INTO admissionfeepayment (id , studentid, templateid, fee_structure_id,fee_amount,createdby)VALUES(:id,:studentid, :templateid, :fee_structure_id,:fee_amount,:createdby)
UPDATE_ADMISSION_FEE=UPDATE admission_stud_registration SET	feepaid = :feepaid , totamountpaid = :totamountpaid ,templateid = :templateid WHERE pid=:studentid

SELECT_DEPARTMENT_HEAD=SELECT deptheadid FROM departmenthead WHERE departmentid=? and active=?
INSERT_DEPARTMENT_HEAD=INSERT INTO departmenthead(pid,sessionid,departmentid,deptheadid,fromdate,active,COMMENT,createdby,createon,modifiedby)	VALUES	(:pid,:sessionid,:departmentid,:deptheadid,CURRENT_DATE,1,:comment,:createdby,CURRENT_DATE,:modifiedby)
MARK_DEPARTMENT_HEAD_INACTIVE=UPDATE departmenthead SET active=-1 ,todate=CURRENT_DATE ,modifiedby=:modifiedby WHERE departmentid=:departmentid AND deptheadid=:prevdeptheadid
GET_ALL_DEPARTMENT_HEAD=SELECT d.departmentid , m.value AS departmentname, d.pid , d.deptheadid , d.fromdate,d.todate,d.active,d.createon,d.modifiedon as modifiedon,d.modifiedby,u.name AS deptheadname , u1.name AS createdby  FROM departmenthead d, master m ,  users u ,  users u1 WHERE d.active=1 AND d.sessionid=? AND m.id=d.departmentid AND m.propertyid=27 AND u.userid=d.deptheadid  AND u1.userid=d.createdby 
GET_COUNT_ALL_DEPARTMENT_HEAD=SELECT count(1) as count  FROM departmenthead d, master m ,  users u ,  users u1 WHERE d.active=1 AND d.sessionid=? AND m.id=d.departmentid AND m.propertyid=27 AND u.userid=d.deptheadid  AND u1.userid=d.createdby 

CHECK_SHEET=SELECT COUNT(1) as count FROM attendance_sheet WHERE month=? AND batch_id=?

ADD_FINE=INSERT INTO feefine (finetypeid, finename, sessionid, createdby, createdon, modifiedby)	VALUES	(:finetypeid, :finename, :sessionid, :createdby, current_date,  :modifiedby)
GET_FINE=SELECT ff.finetypeid , ff.finename,ft.fineid , ft.finetypecategory , ft.fromdate , ft.todate , ft.fineamountpercent,CASE WHEN ft.finetypecategory='88cb77d4-8259-41c9-953d-bafeaf070762'              THEN CONCAT('If Fee payment Late by ',ft.fromdate) WHEN ft.finetypecategory='b2611c13-1395-4e6e-98ae-d349ec991813'                   THEN CONCAT(CONCAT(CONCAT(CONCAT('If Payment Made between ',ft.fromdate),' To '),ft.todate),' of Month')        END AS finerule  , ft.finechargecategory FROM  feefine ff  LEFT  JOIN finetemplate ft ON ft.finetypeid=ff.finetypeid AND ft.deleted=0   WHERE ff.deleted=0     AND ff.sessionid=?
GET_FINE_COUNT=SELECT COUNT(1) AS count  FROM  feefine ff  LEFT  JOIN finetemplate ft ON ft.finetypeid=ff.finetypeid AND ft.deleted=0 WHERE ff.deleted=0     AND ff.sessionid=?
UPDATE_FINE=update feefine set finename=:finename, modifiedby=:modifiedby where finetypeid=:finetypeid
DELETE_FINE=update feefine set deleted=1, modifiedby=:modifiedby where finetypeid=:finetypeid

ADD_FINE_RULE=INSERT INTO finetemplate (fineid, finetypeid, sessionid, finetypecategory, fromdate, todate, finechargecategory, fineamountpercent, createdby, createdon, modifiedby )	VALUES(:fineid, :finetypeid, :sessionid, :finetypecategory, :fromdate, :todate, :finechargecategory, :fineamountpercent,:createdby,CURRENT_DATE,:modifiedby)

ADD_DISCOUNT=INSERT INTO discounttemplate (discountid, sessionid, discountcategoryid, discountname, batchid, studentid, studentcategory, feecategory, discountmode, discount, description, createdby, createdon, modifiedby)VALUES	(:discountid, :sessionid, :discountcategoryid, :discountname, :batchid, :studentid, :studentcategory, :feecategory, :discountmode, :discount, :description, :createdby, CURRENT_DATE, :modifiedby)
EDIT_DISCOUNT=
DELETE_DISCOUNT=
GET_DISCOUNT_LIST=SELECT dt.discountname , m.value AS sessions ,      dt.discountmode ,     CASE WHEN dt.discountmode=1 THEN 'Percentage' WHEN dt.discountmode=0 THEN 'Fixed Amount'  END AS discountmodetext,dt.discount ,u.name AS lastmodifiedby,        dt.discountcategoryid ,        m1.value AS discountcategorytext , dt.studentcategory ,              m2.value AS studentcategorytext , dt.feecategory ,        m3.value AS feecategorytext , dt.studentid , CONCAT(CONCAT(CONCAT(CONCAT(s.fname,' '),CASE WHEN s.mname IS NULL THEN '' ELSE s.mname END),' '),s.lname) AS studentname  FROM discounttemplate dt  LEFT JOIN master m1 ON dt.discountcategoryid=m1.id  LEFT JOIN master m  ON dt.sessionid=m.id  LEFT JOIN master m2 ON dt.studentcategory=m2.id   LEFT JOIN master m3 ON dt.feecategory=m3.id   LEFT JOIN users  u  ON u.userid=dt.modifiedby   LEFT JOIN student s ON s.studentid=dt.studentid  WHERE dt.deleted=0
GET_DISCOUNT_LIST_COUNT=SELECT COUNT(1) as count FROM discounttemplate dt  LEFT JOIN master m1 ON dt.discountcategoryid=m1.id  LEFT JOIN master m  ON dt.sessionid=m.id  LEFT JOIN master m2 ON dt.studentcategory=m2.id  LEFT JOIN master m3 ON dt.feecategory=m3.id  LEFT JOIN users  u  ON u.userid=dt.modifiedby  LEFT JOIN student s ON s.studentid=dt.studentid   WHERE dt.deleted=0

GET_FINE_COND_AMT=SELECT finechargecategory , fineamountpercent FROM finetemplate WHERE fineid=?
UPDATE_FINE_FOR_STUD_MONTH_FEE=UPDATE generatemonthlyfee SET fineid=:fineid , fineamount=:fineamount , modifiedby=:modifiedby WHERE monthly_fee_id=:monthly_fee_id
GET_MONTHLY_FEE_AMOUNT=SELECT amount FROM generatemonthlyfee WHERE monthly_fee_id=?
GET_DISCOUNT_FOR_STUDENT=SELECT dt.discountname , fs.fee_name , CASE WHEN dt.discountmode=0 THEN 'Fixed Amount' WHEN dt.discountmode=1 THEN 'Percent' END AS discountmodetext, dt.discount   FROM discounttemplate dt  JOIN feestructure fs ON dt.feecategory=fs.fee_structure_id WHERE batchid=? AND studentid IS NULL UNION ALL  SELECT dt.discountname , fs.fee_name , CASE WHEN dt.discountmode=0 THEN 'Fixed Amount' WHEN dt.discountmode=1 THEN 'Percent' END AS discountmodetext, dt.discount    FROM discounttemplate dt   JOIN feestructure fs ON dt.feecategory=fs.fee_structure_id  WHERE dt.studentcategory IN (SELECT previledged_student  FROM student WHERE studentid=? ) UNION ALL SELECT dt.discountname , fs.fee_name , CASE WHEN dt.discountmode=0 THEN 'Fixed Amount' WHEN dt.discountmode=1 THEN 'Percent' END AS discountmodetext, dt.discount    FROM discounttemplate dt   JOIN feestructure fs ON dt.feecategory=fs.fee_structure_id  WHERE dt. batchid=? AND studentid=? 